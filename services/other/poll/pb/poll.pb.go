// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poll.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddPollRequest struct {
	Creator              uint64   `protobuf:"varint,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Choices              []string `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	ExpireMinutes        int64    `protobuf:"varint,3,opt,name=expire_minutes,json=expireMinutes,proto3" json:"expire_minutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPollRequest) Reset()         { *m = AddPollRequest{} }
func (m *AddPollRequest) String() string { return proto.CompactTextString(m) }
func (*AddPollRequest) ProtoMessage()    {}
func (*AddPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{0}
}

func (m *AddPollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPollRequest.Unmarshal(m, b)
}
func (m *AddPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPollRequest.Marshal(b, m, deterministic)
}
func (m *AddPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPollRequest.Merge(m, src)
}
func (m *AddPollRequest) XXX_Size() int {
	return xxx_messageInfo_AddPollRequest.Size(m)
}
func (m *AddPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPollRequest proto.InternalMessageInfo

func (m *AddPollRequest) GetCreator() uint64 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *AddPollRequest) GetChoices() []string {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *AddPollRequest) GetExpireMinutes() int64 {
	if m != nil {
		return m.ExpireMinutes
	}
	return 0
}

type AddPollResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPollResponse) Reset()         { *m = AddPollResponse{} }
func (m *AddPollResponse) String() string { return proto.CompactTextString(m) }
func (*AddPollResponse) ProtoMessage()    {}
func (*AddPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{1}
}

func (m *AddPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPollResponse.Unmarshal(m, b)
}
func (m *AddPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPollResponse.Marshal(b, m, deterministic)
}
func (m *AddPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPollResponse.Merge(m, src)
}
func (m *AddPollResponse) XXX_Size() int {
	return xxx_messageInfo_AddPollResponse.Size(m)
}
func (m *AddPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPollResponse proto.InternalMessageInfo

func (m *AddPollResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPollRequest struct {
	PollId               string   `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPollRequest) Reset()         { *m = GetPollRequest{} }
func (m *GetPollRequest) String() string { return proto.CompactTextString(m) }
func (*GetPollRequest) ProtoMessage()    {}
func (*GetPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{2}
}

func (m *GetPollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPollRequest.Unmarshal(m, b)
}
func (m *GetPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPollRequest.Marshal(b, m, deterministic)
}
func (m *GetPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPollRequest.Merge(m, src)
}
func (m *GetPollRequest) XXX_Size() int {
	return xxx_messageInfo_GetPollRequest.Size(m)
}
func (m *GetPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPollRequest proto.InternalMessageInfo

func (m *GetPollRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

type GetPollResponse struct {
	PollId               string        `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Results              []*PollChoice `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	ExpireMinutes        int64         `protobuf:"varint,3,opt,name=expire_minutes,json=expireMinutes,proto3" json:"expire_minutes,omitempty"`
	HasExpiration        bool          `protobuf:"varint,4,opt,name=has_expiration,json=hasExpiration,proto3" json:"has_expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetPollResponse) Reset()         { *m = GetPollResponse{} }
func (m *GetPollResponse) String() string { return proto.CompactTextString(m) }
func (*GetPollResponse) ProtoMessage()    {}
func (*GetPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{3}
}

func (m *GetPollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPollResponse.Unmarshal(m, b)
}
func (m *GetPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPollResponse.Marshal(b, m, deterministic)
}
func (m *GetPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPollResponse.Merge(m, src)
}
func (m *GetPollResponse) XXX_Size() int {
	return xxx_messageInfo_GetPollResponse.Size(m)
}
func (m *GetPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPollResponse proto.InternalMessageInfo

func (m *GetPollResponse) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

func (m *GetPollResponse) GetResults() []*PollChoice {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetPollResponse) GetExpireMinutes() int64 {
	if m != nil {
		return m.ExpireMinutes
	}
	return 0
}

func (m *GetPollResponse) GetHasExpiration() bool {
	if m != nil {
		return m.HasExpiration
	}
	return false
}

type PollChoice struct {
	Choice               string   `protobuf:"bytes,1,opt,name=choice,proto3" json:"choice,omitempty"`
	Percentage           uint32   `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Users                []uint64 `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollChoice) Reset()         { *m = PollChoice{} }
func (m *PollChoice) String() string { return proto.CompactTextString(m) }
func (*PollChoice) ProtoMessage()    {}
func (*PollChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{4}
}

func (m *PollChoice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollChoice.Unmarshal(m, b)
}
func (m *PollChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollChoice.Marshal(b, m, deterministic)
}
func (m *PollChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollChoice.Merge(m, src)
}
func (m *PollChoice) XXX_Size() int {
	return xxx_messageInfo_PollChoice.Size(m)
}
func (m *PollChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_PollChoice.DiscardUnknown(m)
}

var xxx_messageInfo_PollChoice proto.InternalMessageInfo

func (m *PollChoice) GetChoice() string {
	if m != nil {
		return m.Choice
	}
	return ""
}

func (m *PollChoice) GetPercentage() uint32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *PollChoice) GetUsers() []uint64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type VotePollRequest struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PollId               string   `protobuf:"bytes,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Choice               string   `protobuf:"bytes,3,opt,name=choice,proto3" json:"choice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VotePollRequest) Reset()         { *m = VotePollRequest{} }
func (m *VotePollRequest) String() string { return proto.CompactTextString(m) }
func (*VotePollRequest) ProtoMessage()    {}
func (*VotePollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{5}
}

func (m *VotePollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VotePollRequest.Unmarshal(m, b)
}
func (m *VotePollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VotePollRequest.Marshal(b, m, deterministic)
}
func (m *VotePollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotePollRequest.Merge(m, src)
}
func (m *VotePollRequest) XXX_Size() int {
	return xxx_messageInfo_VotePollRequest.Size(m)
}
func (m *VotePollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VotePollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VotePollRequest proto.InternalMessageInfo

func (m *VotePollRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *VotePollRequest) GetPollId() string {
	if m != nil {
		return m.PollId
	}
	return ""
}

func (m *VotePollRequest) GetChoice() string {
	if m != nil {
		return m.Choice
	}
	return ""
}

type VotePollResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VotePollResponse) Reset()         { *m = VotePollResponse{} }
func (m *VotePollResponse) String() string { return proto.CompactTextString(m) }
func (*VotePollResponse) ProtoMessage()    {}
func (*VotePollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d64382c74eeea90, []int{6}
}

func (m *VotePollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VotePollResponse.Unmarshal(m, b)
}
func (m *VotePollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VotePollResponse.Marshal(b, m, deterministic)
}
func (m *VotePollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotePollResponse.Merge(m, src)
}
func (m *VotePollResponse) XXX_Size() int {
	return xxx_messageInfo_VotePollResponse.Size(m)
}
func (m *VotePollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VotePollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VotePollResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddPollRequest)(nil), "pb.AddPollRequest")
	proto.RegisterType((*AddPollResponse)(nil), "pb.AddPollResponse")
	proto.RegisterType((*GetPollRequest)(nil), "pb.GetPollRequest")
	proto.RegisterType((*GetPollResponse)(nil), "pb.GetPollResponse")
	proto.RegisterType((*PollChoice)(nil), "pb.PollChoice")
	proto.RegisterType((*VotePollRequest)(nil), "pb.VotePollRequest")
	proto.RegisterType((*VotePollResponse)(nil), "pb.VotePollResponse")
}

func init() { proto.RegisterFile("poll.proto", fileDescriptor_5d64382c74eeea90) }

var fileDescriptor_5d64382c74eeea90 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x1f, 0xa6, 0x76, 0xa4, 0xa9, 0xac, 0x45, 0x43, 0x0f, 0x12, 0x03, 0x42, 0xbc, 0x04,
	0xac, 0xbf, 0xa0, 0x88, 0x94, 0x1e, 0x04, 0xd9, 0x83, 0x07, 0x3d, 0x94, 0xb4, 0x3b, 0xd8, 0x60,
	0xcc, 0xc6, 0xdd, 0x0d, 0xf8, 0x57, 0xbc, 0xfa, 0x4b, 0x65, 0xb3, 0x4d, 0x9a, 0x14, 0x04, 0x8f,
	0xef, 0xcd, 0xdb, 0x9d, 0x37, 0x6f, 0x06, 0xa0, 0xe4, 0x79, 0x9e, 0x94, 0x82, 0x2b, 0x4e, 0xec,
	0x72, 0x1d, 0xbd, 0x83, 0x3f, 0x67, 0xec, 0x89, 0xe7, 0x39, 0xc5, 0xcf, 0x0a, 0xa5, 0x22, 0x01,
	0x0c, 0x36, 0x02, 0x53, 0xc5, 0x45, 0x60, 0x85, 0x56, 0xec, 0xd2, 0x06, 0xd6, 0x95, 0x2d, 0xcf,
	0x36, 0x28, 0x03, 0x3b, 0x74, 0xe2, 0x21, 0x6d, 0x20, 0xb9, 0x06, 0x1f, 0xbf, 0xca, 0x4c, 0xe0,
	0xea, 0x23, 0x2b, 0x2a, 0x85, 0x32, 0x70, 0x42, 0x2b, 0x76, 0xe8, 0xc8, 0xb0, 0x8f, 0x86, 0x8c,
	0xae, 0x60, 0xdc, 0x36, 0x93, 0x25, 0x2f, 0x24, 0x12, 0x1f, 0xec, 0x8c, 0xd5, 0x8d, 0x86, 0xd4,
	0xce, 0x58, 0x74, 0x03, 0xfe, 0x02, 0x55, 0xd7, 0xcf, 0x05, 0x0c, 0xb4, 0xe7, 0x55, 0x2b, 0xf3,
	0x34, 0x5c, 0xb2, 0xe8, 0xc7, 0x82, 0x71, 0xab, 0xdd, 0x7d, 0xf7, 0x97, 0x98, 0xc4, 0x30, 0x10,
	0x28, 0xab, 0x5c, 0x19, 0xef, 0x27, 0x33, 0x3f, 0x29, 0xd7, 0x89, 0x7e, 0x7b, 0x5f, 0xcf, 0x40,
	0x9b, 0xf2, 0x3f, 0x67, 0xd1, 0xb2, 0x6d, 0x2a, 0x57, 0x35, 0x99, 0xaa, 0x8c, 0x17, 0x81, 0x1b,
	0x5a, 0xf1, 0x31, 0x1d, 0x6d, 0x53, 0xf9, 0xd0, 0x92, 0xd1, 0x0b, 0xc0, 0xbe, 0x09, 0x39, 0x07,
	0xcf, 0x44, 0xd6, 0xb8, 0x33, 0x88, 0x5c, 0x02, 0x94, 0x28, 0x36, 0x58, 0xa8, 0xf4, 0x0d, 0x03,
	0x3b, 0xb4, 0xe2, 0x11, 0xed, 0x30, 0x64, 0x02, 0x47, 0x95, 0x44, 0xa1, 0xad, 0x38, 0xb1, 0x4b,
	0x0d, 0x88, 0x5e, 0x61, 0xfc, 0xcc, 0x15, 0x1e, 0x84, 0xa5, 0x6b, 0xcd, 0xfc, 0x2e, 0xf5, 0x34,
	0x5c, 0xb2, 0x6e, 0x30, 0x76, 0x2f, 0x98, 0xbd, 0x25, 0xa7, 0x6b, 0x29, 0x22, 0x70, 0xba, 0xff,
	0xdc, 0xa4, 0x3b, 0xfb, 0xb6, 0xc0, 0xd5, 0x04, 0x49, 0xc0, 0x99, 0x33, 0x46, 0x88, 0xce, 0xb0,
	0x7f, 0x3e, 0xd3, 0xb3, 0x1e, 0xb7, 0x5b, 0x4b, 0x02, 0xce, 0x02, 0x95, 0xd1, 0xf7, 0xd7, 0x6b,
	0xf4, 0x87, 0x6b, 0xbc, 0x05, 0x57, 0x37, 0x27, 0x75, 0xf1, 0x60, 0xc6, 0xe9, 0xa4, 0x4f, 0x9a,
	0x27, 0x6b, 0xaf, 0xbe, 0xe9, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x27, 0x93, 0xa4,
	0xe1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PollClient is the client API for Poll service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PollClient interface {
	Add(ctx context.Context, in *AddPollRequest, opts ...grpc.CallOption) (*AddPollResponse, error)
	Get(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error)
	Vote(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*VotePollResponse, error)
}

type pollClient struct {
	cc *grpc.ClientConn
}

func NewPollClient(cc *grpc.ClientConn) PollClient {
	return &pollClient{cc}
}

func (c *pollClient) Add(ctx context.Context, in *AddPollRequest, opts ...grpc.CallOption) (*AddPollResponse, error) {
	out := new(AddPollResponse)
	err := c.cc.Invoke(ctx, "/pb.Poll/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollClient) Get(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error) {
	out := new(GetPollResponse)
	err := c.cc.Invoke(ctx, "/pb.Poll/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollClient) Vote(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*VotePollResponse, error) {
	out := new(VotePollResponse)
	err := c.cc.Invoke(ctx, "/pb.Poll/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollServer is the server API for Poll service.
type PollServer interface {
	Add(context.Context, *AddPollRequest) (*AddPollResponse, error)
	Get(context.Context, *GetPollRequest) (*GetPollResponse, error)
	Vote(context.Context, *VotePollRequest) (*VotePollResponse, error)
}

// UnimplementedPollServer can be embedded to have forward compatible implementations.
type UnimplementedPollServer struct {
}

func (*UnimplementedPollServer) Add(ctx context.Context, req *AddPollRequest) (*AddPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedPollServer) Get(ctx context.Context, req *GetPollRequest) (*GetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPollServer) Vote(ctx context.Context, req *VotePollRequest) (*VotePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}

func RegisterPollServer(s *grpc.Server, srv PollServer) {
	s.RegisterService(&_Poll_serviceDesc, srv)
}

func _Poll_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Poll/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).Add(ctx, req.(*AddPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poll_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Poll/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).Get(ctx, req.(*GetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poll_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Poll/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).Vote(ctx, req.(*VotePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poll_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Poll",
	HandlerType: (*PollServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Poll_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Poll_Get_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Poll_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poll.proto",
}
